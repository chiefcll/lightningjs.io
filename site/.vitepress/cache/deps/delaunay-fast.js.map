{
  "version": 3,
  "sources": ["../../../../node_modules/delaunay-fast/delaunay.js"],
  "sourcesContent": ["var Delaunay;\n\n(function() {\n  \"use strict\";\n\n  var EPSILON = 1.0 / 1048576.0;\n\n  function supertriangle(vertices) {\n    var xmin = Number.POSITIVE_INFINITY,\n        ymin = Number.POSITIVE_INFINITY,\n        xmax = Number.NEGATIVE_INFINITY,\n        ymax = Number.NEGATIVE_INFINITY,\n        i, dx, dy, dmax, xmid, ymid;\n\n    for(i = vertices.length; i--; ) {\n      if(vertices[i][0] < xmin) xmin = vertices[i][0];\n      if(vertices[i][0] > xmax) xmax = vertices[i][0];\n      if(vertices[i][1] < ymin) ymin = vertices[i][1];\n      if(vertices[i][1] > ymax) ymax = vertices[i][1];\n    }\n\n    dx = xmax - xmin;\n    dy = ymax - ymin;\n    dmax = Math.max(dx, dy);\n    xmid = xmin + dx * 0.5;\n    ymid = ymin + dy * 0.5;\n\n    return [\n      [xmid - 20 * dmax, ymid -      dmax],\n      [xmid            , ymid + 20 * dmax],\n      [xmid + 20 * dmax, ymid -      dmax]\n    ];\n  }\n\n  function circumcircle(vertices, i, j, k) {\n    var x1 = vertices[i][0],\n        y1 = vertices[i][1],\n        x2 = vertices[j][0],\n        y2 = vertices[j][1],\n        x3 = vertices[k][0],\n        y3 = vertices[k][1],\n        fabsy1y2 = Math.abs(y1 - y2),\n        fabsy2y3 = Math.abs(y2 - y3),\n        xc, yc, m1, m2, mx1, mx2, my1, my2, dx, dy;\n\n    /* Check for coincident points */\n    if(fabsy1y2 < EPSILON && fabsy2y3 < EPSILON)\n      throw new Error(\"Eek! Coincident points!\");\n\n    if(fabsy1y2 < EPSILON) {\n      m2  = -((x3 - x2) / (y3 - y2));\n      mx2 = (x2 + x3) / 2.0;\n      my2 = (y2 + y3) / 2.0;\n      xc  = (x2 + x1) / 2.0;\n      yc  = m2 * (xc - mx2) + my2;\n    }\n\n    else if(fabsy2y3 < EPSILON) {\n      m1  = -((x2 - x1) / (y2 - y1));\n      mx1 = (x1 + x2) / 2.0;\n      my1 = (y1 + y2) / 2.0;\n      xc  = (x3 + x2) / 2.0;\n      yc  = m1 * (xc - mx1) + my1;\n    }\n\n    else {\n      m1  = -((x2 - x1) / (y2 - y1));\n      m2  = -((x3 - x2) / (y3 - y2));\n      mx1 = (x1 + x2) / 2.0;\n      mx2 = (x2 + x3) / 2.0;\n      my1 = (y1 + y2) / 2.0;\n      my2 = (y2 + y3) / 2.0;\n      xc  = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);\n      yc  = (fabsy1y2 > fabsy2y3) ?\n        m1 * (xc - mx1) + my1 :\n        m2 * (xc - mx2) + my2;\n    }\n\n    dx = x2 - xc;\n    dy = y2 - yc;\n    return {i: i, j: j, k: k, x: xc, y: yc, r: dx * dx + dy * dy};\n  }\n\n  function dedup(edges) {\n    var i, j, a, b, m, n;\n\n    for(j = edges.length; j; ) {\n      b = edges[--j];\n      a = edges[--j];\n\n      for(i = j; i; ) {\n        n = edges[--i];\n        m = edges[--i];\n\n        if((a === m && b === n) || (a === n && b === m)) {\n          edges.splice(j, 2);\n          edges.splice(i, 2);\n          break;\n        }\n      }\n    }\n  }\n\n  Delaunay = {\n    triangulate: function(vertices, key) {\n      var n = vertices.length,\n          i, j, indices, st, open, closed, edges, dx, dy, a, b, c;\n\n      /* Bail if there aren't enough vertices to form any triangles. */\n      if(n < 3)\n        return [];\n\n      /* Slice out the actual vertices from the passed objects. (Duplicate the\n       * array even if we don't, though, since we need to make a supertriangle\n       * later on!) */\n      vertices = vertices.slice(0);\n\n      if(key)\n        for(i = n; i--; )\n          vertices[i] = vertices[i][key];\n\n      /* Make an array of indices into the vertex array, sorted by the\n       * vertices' x-position. */\n      indices = new Array(n);\n\n      for(i = n; i--; )\n        indices[i] = i;\n\n      indices.sort(function(i, j) {\n        return vertices[j][0] - vertices[i][0];\n      });\n\n      /* Next, find the vertices of the supertriangle (which contains all other\n       * triangles), and append them onto the end of a (copy of) the vertex\n       * array. */\n      st = supertriangle(vertices);\n      vertices.push(st[0], st[1], st[2]);\n      \n      /* Initialize the open list (containing the supertriangle and nothing\n       * else) and the closed list (which is empty since we havn't processed\n       * any triangles yet). */\n      open   = [circumcircle(vertices, n + 0, n + 1, n + 2)];\n      closed = [];\n      edges  = [];\n\n      /* Incrementally add each vertex to the mesh. */\n      for(i = indices.length; i--; edges.length = 0) {\n        c = indices[i];\n\n        /* For each open triangle, check to see if the current point is\n         * inside it's circumcircle. If it is, remove the triangle and add\n         * it's edges to an edge list. */\n        for(j = open.length; j--; ) {\n          /* If this point is to the right of this triangle's circumcircle,\n           * then this triangle should never get checked again. Remove it\n           * from the open list, add it to the closed list, and skip. */\n          dx = vertices[c][0] - open[j].x;\n          if(dx > 0.0 && dx * dx > open[j].r) {\n            closed.push(open[j]);\n            open.splice(j, 1);\n            continue;\n          }\n\n          /* If we're outside the circumcircle, skip this triangle. */\n          dy = vertices[c][1] - open[j].y;\n          if(dx * dx + dy * dy - open[j].r > EPSILON)\n            continue;\n\n          /* Remove the triangle and add it's edges to the edge list. */\n          edges.push(\n            open[j].i, open[j].j,\n            open[j].j, open[j].k,\n            open[j].k, open[j].i\n          );\n          open.splice(j, 1);\n        }\n\n        /* Remove any doubled edges. */\n        dedup(edges);\n\n        /* Add a new triangle for each edge. */\n        for(j = edges.length; j; ) {\n          b = edges[--j];\n          a = edges[--j];\n          open.push(circumcircle(vertices, a, b, c));\n        }\n      }\n\n      /* Copy any remaining open triangles to the closed list, and then\n       * remove any triangles that share a vertex with the supertriangle,\n       * building a list of triplets that represent triangles. */\n      for(i = open.length; i--; )\n        closed.push(open[i]);\n      open.length = 0;\n\n      for(i = closed.length; i--; )\n        if(closed[i].i < n && closed[i].j < n && closed[i].k < n)\n          open.push(closed[i].i, closed[i].j, closed[i].k);\n\n      /* Yay, we're done! */\n      return open;\n    },\n    contains: function(tri, p) {\n      /* Bounding box test first, for quick rejections. */\n      if((p[0] < tri[0][0] && p[0] < tri[1][0] && p[0] < tri[2][0]) ||\n         (p[0] > tri[0][0] && p[0] > tri[1][0] && p[0] > tri[2][0]) ||\n         (p[1] < tri[0][1] && p[1] < tri[1][1] && p[1] < tri[2][1]) ||\n         (p[1] > tri[0][1] && p[1] > tri[1][1] && p[1] > tri[2][1]))\n        return null;\n\n      var a = tri[1][0] - tri[0][0],\n          b = tri[2][0] - tri[0][0],\n          c = tri[1][1] - tri[0][1],\n          d = tri[2][1] - tri[0][1],\n          i = a * d - b * c;\n\n      /* Degenerate tri. */\n      if(i === 0.0)\n        return null;\n\n      var u = (d * (p[0] - tri[0][0]) - b * (p[1] - tri[0][1])) / i,\n          v = (a * (p[1] - tri[0][1]) - c * (p[0] - tri[0][0])) / i;\n\n      /* If we're outside the tri, fail. */\n      if(u < 0.0 || v < 0.0 || (u + v) > 1.0)\n        return null;\n\n      return [u, v];\n    }\n  };\n\n  if(typeof module !== \"undefined\")\n    module.exports = Delaunay;\n})();\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,QAAI;AAEJ,KAAC,WAAW;AACV;AAEA,UAAI,UAAU,IAAM;AAEpB,eAAS,cAAc,UAAU;AAC/B,YAAI,OAAO,OAAO,mBACd,OAAO,OAAO,mBACd,OAAO,OAAO,mBACd,OAAO,OAAO,mBACd,GAAG,IAAI,IAAI,MAAM,MAAM;AAE3B,aAAI,IAAI,SAAS,QAAQ,OAAO;AAC9B,cAAG,SAAS,CAAC,EAAE,CAAC,IAAI;AAAM,mBAAO,SAAS,CAAC,EAAE,CAAC;AAC9C,cAAG,SAAS,CAAC,EAAE,CAAC,IAAI;AAAM,mBAAO,SAAS,CAAC,EAAE,CAAC;AAC9C,cAAG,SAAS,CAAC,EAAE,CAAC,IAAI;AAAM,mBAAO,SAAS,CAAC,EAAE,CAAC;AAC9C,cAAG,SAAS,CAAC,EAAE,CAAC,IAAI;AAAM,mBAAO,SAAS,CAAC,EAAE,CAAC;AAAA,QAChD;AAEA,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,eAAO,KAAK,IAAI,IAAI,EAAE;AACtB,eAAO,OAAO,KAAK;AACnB,eAAO,OAAO,KAAK;AAEnB,eAAO;AAAA,UACL,CAAC,OAAO,KAAK,MAAM,OAAY,IAAI;AAAA,UACnC,CAAC,MAAkB,OAAO,KAAK,IAAI;AAAA,UACnC,CAAC,OAAO,KAAK,MAAM,OAAY,IAAI;AAAA,QACrC;AAAA,MACF;AAEA,eAAS,aAAa,UAAU,GAAG,GAAG,GAAG;AACvC,YAAI,KAAK,SAAS,CAAC,EAAE,CAAC,GAClB,KAAK,SAAS,CAAC,EAAE,CAAC,GAClB,KAAK,SAAS,CAAC,EAAE,CAAC,GAClB,KAAK,SAAS,CAAC,EAAE,CAAC,GAClB,KAAK,SAAS,CAAC,EAAE,CAAC,GAClB,KAAK,SAAS,CAAC,EAAE,CAAC,GAClB,WAAW,KAAK,IAAI,KAAK,EAAE,GAC3B,WAAW,KAAK,IAAI,KAAK,EAAE,GAC3B,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,IAAI;AAG5C,YAAG,WAAW,WAAW,WAAW;AAClC,gBAAM,IAAI,MAAM,yBAAyB;AAE3C,YAAG,WAAW,SAAS;AACrB,eAAM,GAAG,KAAK,OAAO,KAAK;AAC1B,iBAAO,KAAK,MAAM;AAClB,iBAAO,KAAK,MAAM;AAClB,gBAAO,KAAK,MAAM;AAClB,eAAM,MAAM,KAAK,OAAO;AAAA,QAC1B,WAEQ,WAAW,SAAS;AAC1B,eAAM,GAAG,KAAK,OAAO,KAAK;AAC1B,iBAAO,KAAK,MAAM;AAClB,iBAAO,KAAK,MAAM;AAClB,gBAAO,KAAK,MAAM;AAClB,eAAM,MAAM,KAAK,OAAO;AAAA,QAC1B,OAEK;AACH,eAAM,GAAG,KAAK,OAAO,KAAK;AAC1B,eAAM,GAAG,KAAK,OAAO,KAAK;AAC1B,iBAAO,KAAK,MAAM;AAClB,iBAAO,KAAK,MAAM;AAClB,iBAAO,KAAK,MAAM;AAClB,iBAAO,KAAK,MAAM;AAClB,gBAAO,KAAK,MAAM,KAAK,MAAM,MAAM,QAAQ,KAAK;AAChD,eAAO,WAAW,WAChB,MAAM,KAAK,OAAO,MAClB,MAAM,KAAK,OAAO;AAAA,QACtB;AAEA,aAAK,KAAK;AACV,aAAK,KAAK;AACV,eAAO,EAAC,GAAM,GAAM,GAAM,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,KAAK,KAAK,GAAE;AAAA,MAC9D;AAEA,eAAS,MAAM,OAAO;AACpB,YAAI,GAAG,GAAG,GAAG,GAAG,GAAG;AAEnB,aAAI,IAAI,MAAM,QAAQ,KAAK;AACzB,cAAI,MAAM,EAAE,CAAC;AACb,cAAI,MAAM,EAAE,CAAC;AAEb,eAAI,IAAI,GAAG,KAAK;AACd,gBAAI,MAAM,EAAE,CAAC;AACb,gBAAI,MAAM,EAAE,CAAC;AAEb,gBAAI,MAAM,KAAK,MAAM,KAAO,MAAM,KAAK,MAAM,GAAI;AAC/C,oBAAM,OAAO,GAAG,CAAC;AACjB,oBAAM,OAAO,GAAG,CAAC;AACjB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,iBAAW;AAAA,QACT,aAAa,SAAS,UAAU,KAAK;AACnC,cAAI,IAAI,SAAS,QACb,GAAG,GAAG,SAAS,IAAI,MAAM,QAAQ,OAAO,IAAI,IAAI,GAAG,GAAG;AAG1D,cAAG,IAAI;AACL,mBAAO,CAAC;AAKV,qBAAW,SAAS,MAAM,CAAC;AAE3B,cAAG;AACD,iBAAI,IAAI,GAAG;AACT,uBAAS,CAAC,IAAI,SAAS,CAAC,EAAE,GAAG;AAIjC,oBAAU,IAAI,MAAM,CAAC;AAErB,eAAI,IAAI,GAAG;AACT,oBAAQ,CAAC,IAAI;AAEf,kBAAQ,KAAK,SAASA,IAAGC,IAAG;AAC1B,mBAAO,SAASA,EAAC,EAAE,CAAC,IAAI,SAASD,EAAC,EAAE,CAAC;AAAA,UACvC,CAAC;AAKD,eAAK,cAAc,QAAQ;AAC3B,mBAAS,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAKjC,iBAAS,CAAC,aAAa,UAAU,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;AACrD,mBAAS,CAAC;AACV,kBAAS,CAAC;AAGV,eAAI,IAAI,QAAQ,QAAQ,KAAK,MAAM,SAAS,GAAG;AAC7C,gBAAI,QAAQ,CAAC;AAKb,iBAAI,IAAI,KAAK,QAAQ,OAAO;AAI1B,mBAAK,SAAS,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;AAC9B,kBAAG,KAAK,KAAO,KAAK,KAAK,KAAK,CAAC,EAAE,GAAG;AAClC,uBAAO,KAAK,KAAK,CAAC,CAAC;AACnB,qBAAK,OAAO,GAAG,CAAC;AAChB;AAAA,cACF;AAGA,mBAAK,SAAS,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;AAC9B,kBAAG,KAAK,KAAK,KAAK,KAAK,KAAK,CAAC,EAAE,IAAI;AACjC;AAGF,oBAAM;AAAA,gBACJ,KAAK,CAAC,EAAE;AAAA,gBAAG,KAAK,CAAC,EAAE;AAAA,gBACnB,KAAK,CAAC,EAAE;AAAA,gBAAG,KAAK,CAAC,EAAE;AAAA,gBACnB,KAAK,CAAC,EAAE;AAAA,gBAAG,KAAK,CAAC,EAAE;AAAA,cACrB;AACA,mBAAK,OAAO,GAAG,CAAC;AAAA,YAClB;AAGA,kBAAM,KAAK;AAGX,iBAAI,IAAI,MAAM,QAAQ,KAAK;AACzB,kBAAI,MAAM,EAAE,CAAC;AACb,kBAAI,MAAM,EAAE,CAAC;AACb,mBAAK,KAAK,aAAa,UAAU,GAAG,GAAG,CAAC,CAAC;AAAA,YAC3C;AAAA,UACF;AAKA,eAAI,IAAI,KAAK,QAAQ;AACnB,mBAAO,KAAK,KAAK,CAAC,CAAC;AACrB,eAAK,SAAS;AAEd,eAAI,IAAI,OAAO,QAAQ;AACrB,gBAAG,OAAO,CAAC,EAAE,IAAI,KAAK,OAAO,CAAC,EAAE,IAAI,KAAK,OAAO,CAAC,EAAE,IAAI;AACrD,mBAAK,KAAK,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;AAGnD,iBAAO;AAAA,QACT;AAAA,QACA,UAAU,SAAS,KAAK,GAAG;AAEzB,cAAI,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KACvD,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KACvD,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KACvD,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;AACzD,mBAAO;AAET,cAAI,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,GACxB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,GACxB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,GACxB,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,GACxB,IAAI,IAAI,IAAI,IAAI;AAGpB,cAAG,MAAM;AACP,mBAAO;AAET,cAAI,KAAK,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,GACxD,KAAK,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM;AAG5D,cAAG,IAAI,KAAO,IAAI,KAAQ,IAAI,IAAK;AACjC,mBAAO;AAET,iBAAO,CAAC,GAAG,CAAC;AAAA,QACd;AAAA,MACF;AAEA,UAAG,OAAO,WAAW;AACnB,eAAO,UAAU;AAAA,IACrB,GAAG;AAAA;AAAA;",
  "names": ["i", "j"]
}
